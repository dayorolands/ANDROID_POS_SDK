package com.interswitchng.smartpos.shared.interfaces.library

import com.interswitchng.smartpos.shared.models.core.TerminalInfo
import com.interswitchng.smartpos.shared.models.transaction.IswPaymentInfo
import com.interswitchng.smartpos.shared.models.transaction.cardpaycode.CardDetail
import com.interswitchng.smartpos.shared.models.transaction.cardpaycode.request.TransactionInfo
import com.interswitchng.smartpos.shared.models.transaction.cardpaycode.response.TransactionResponse
import com.interswitchng.smartpos.shared.models.transaction.payments.billpayment.InquiryResponse

/**
 * This interface provides operations that target the ISO-8385 message specification,
 * it provides functionality operations that require the ISO layer's method for communication.
 */
internal interface IsoService {

    /**
     * Uses the provided terminalId to perform key exchange with the EPMS server
     *
     * @param terminalId  a string representing the configured terminal id
     * @param ip the ip address to download terminal parameters from
     * @param port the port number for the ip address
     * @return     boolean expression indicating the success or failure status of the key exchange
     */
    fun downloadKey(terminalId: String, ip: String, port: Int): Boolean {
        return false
    }

    /**
     * Uses the provided terminalId to download the terminal information, like name and location.
     *
     * @param terminalId  a string representing the configured terminal id
     * @param ip the ip address to download terminal parameters from
     * @param port the port number for the ip address
     * @return  boolean expression indicating the success or failure of the terminal info download
     * @see TerminalInfo
     */
    fun downloadTerminalParameters(terminalId: String, ip: String, port: Int): Boolean {
        return false
    }

    /**
     * Initiates a card transaction using the provided terminal and transaction info, and returns the
     * transaction response provided by EPMS
     *
     * @param terminalInfo  the necessary information that identifies the current POS terminal
     * @param transaction  the purchase information required to perform the transaction
     * @return   response status indicating transaction success or failure
     */
    fun initiateCardPurchase(
        terminalInfo: TerminalInfo,
        transaction: TransactionInfo
    ): TransactionResponse?

    /**
     * Initiates a paycode transaction using the provided code, terminal and payment info, and returns
     * a status response provided by the EPMS
     *
     * @param terminalInfo the necessary information that identifies the current POS terminal
     * @param code  the paycode that is generated by the customer's bank
     * @param iswPaymentInfo the information required to make the current purchase
     * @return  a pair of [CardDetail] for the formatted paycode card
     *   and [TransactionResponse] status indicating transaction success or failure
     */
    fun initiatePaycodePurchase(
        terminalInfo: TerminalInfo,
        code: String,
        iswPaymentInfo: IswPaymentInfo
    ):  Pair<CardDetail, TransactionResponse?>

    /**
     * Initiates a pre-authorization transaction using the provided terminal and transaction info, and returns the
     * transaction response provided by EPMS
     *
     * @param terminalInfo  the necessary information that identifies the current POS terminal
     * @param transaction  the purchase information required to perform the transaction
     * @return   response status indicating transaction success or failure
     */
    fun initiatePreAuthorization(
        terminalInfo: TerminalInfo,
        transaction: TransactionInfo
    ): TransactionResponse?

    /**
     * Initiates a completion transaction using the provided terminal and transaction info, and returns the
     * transaction response provided by EPMS
     *
     * @param terminalInfo  the necessary information that identifies the current POS terminal
     * @param transaction  the information required to perform the transaction
     * @param preAuthStan  the stan of the original Pre-Auth transaction
     * @param preAuthDateTime  the dateTime of the original Pre-Auth transaction
     * @return   response status indicating transaction success or failure
     */
    fun initiateCompletion(
        terminalInfo: TerminalInfo,
        transaction: TransactionInfo,
        preAuthStan: String,
        preAuthDateTime: String,
        preAuthAuthId: String
    ): TransactionResponse?

    /**
     * Initiates a reversal transaction using the provided terminal and transaction info, and returns the
     * transaction response provided by EPMS
     *
     * @param terminalInfo  the necessary information that identifies the current POS terminal
     * @param transaction  the information required to perform the transaction
     * @return   response status indicating transaction success or failure
     */
    fun initiateReversal(
        terminalInfo: TerminalInfo,
        transaction: TransactionInfo
    ): TransactionResponse?

    /**
     * Initiates a refund transaction using the provided terminal and transaction info, and returns the
     * transaction response provided by EPMS
     *
     * @param terminalInfo  the necessary information that identifies the current POS terminal
     * @param transaction  the information required to perform the transaction
     * @return   response status indicating transaction success or failure
     */
    fun initiateRefund(
        terminalInfo: TerminalInfo,
        transaction: TransactionInfo
    ): TransactionResponse?


    /**
     * Initiates a billpayment transaction using the provided terminal and transaction info, and returns the
     * transaction response provided by EPMS
     *
     * @param terminalInfo  the necessary information that identifies the current POS terminal
     * @param transaction  the information required to perform the transaction
     * @return   response status indicating transaction success or failure
     */
    fun initiateBillPayment(
        terminalInfo: TerminalInfo,
        transaction: TransactionInfo,
        inquiryResponse: InquiryResponse
    ): TransactionResponse?

    /**
     * Initiates a purchase transaction with cash back using the provided terminal and transaction info,
     * and returns the transaction response provided by EPMS
     *
     * @param terminalInfo  the necessary information that identifies the current POS terminal
     * @param transaction  the information required to perform the transaction
     * @return   response status indicating transaction success or failure
     */
    fun initiatePurchaseWithCashBack(
            terminalInfo: TerminalInfo,
            transaction: TransactionInfo
    ): TransactionResponse?
}
